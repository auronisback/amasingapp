{"version":3,"sources":["components/TopBar.js","components/MapPanel.js","components/SearchWindow.js","components/DestinationMarker.js","components/MessageDialog.js","components/ParkStroke.js","components/AvailableParkList.js","components/ParkInfo.js","components/ParkMarker.js","components/SuggestedParkList.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","streetName","onSearch","length","onSearchInputChanged","evt","setState","target","value","onInputKeyPressed","key","library","add","faSearch","faUndo","inherits","createClass","react_default","a","createElement","className","onClick","onReset","react_fontawesome_index_es","icon","type","placeholder","onChange","onKeyPress","Component","MapWrapper","withScriptjs","withGoogleMap","react_google_maps_lib","center","defaultZoom","zoom","onMapClick","children","MapPanel","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","concat","onDestinationSelection","latLng","lat","lng","_this$props","gMapsApiKey","googleMapURL","loadingElement","style","height","containerElement","mapElement","SearchWindow","onDowChanged","dow","onTimeChanged","time","getTimeFromString","h","getHours","m","getMinutes","onDistanceChanged","onSliderChanged","onWalkWeightChanged","onFormSubmitted","nativeEvent","preventDefault","onSubmit","faWalking","faBlind","faSpinner","padStart","distance","min","step","es","walkWeight","disabled","isLoading","pulse","pieces","split","Date","setHours","setMinutes","DEFAULT_MAX_DISTANCE","DestinationMarker","getDay","onDowUpdate","onTimeUpdate","onDistanceUpdate","onWalkWeightUpdate","destination","overlay","searchVisible","position","onCloseClick","onSearchClosed","SearchWindow_SearchWindow","onMarkerClick","radius","options","fillColor","CIRCLE_FILL_COLOR","strokeWeight","CIRCLE_STROKE_WEIGHT","markerPixelOffset","x","y","NO_RESULTS","MessageDialog","getMessage","message","typeClass","onClose","TYPE_MESSAGE","TYPE_WARNING","TYPE_ERROR","ParkStroke","path","start","end","strokeColor","color","strokeOpacity","opacity","AvailableParkList","_buildAvailableParks","availableParks","parks","forEach","elem","push","ParkStroke_ParkStroke","id","STROKE_COLOR","STROKE_OPACITY","ParkInfo","occRate","toFixed","_distanceToString","parkNumber","streetType","haveMes","d","ParkMarker","infoWindowShown","toggleOpen","handleClose","getPosition","parking","label","ParkInfo_ParkInfo","occupancy","number","SuggestedParkList","_buildSuggestedParks","markers","index","ParkMarker_ParkMarker","App","searching","onDestinationClick","onSearchWindowClosed","setDestination","reset","searchStreetByName","Geocode","fromAddress","then","response","_response$results$0$g","results","geometry","location","error","_showMessageDialog","onDialogClosed","searchParks","params","_sendRequest","_loadAllParks","axios","get","configuration","allParksEndpoint","_parseAvailableParkResponse","data","line","coordinates","_parseMeasurementResponse","_getParkData","parksNotFoundMessage","undefined","setApiKey","getAPIKey","dialog","MessageDialog_MessageDialog","TopBar_TopBar","MapPanel_MapPanel","defaultMapCenter","destinationMapZoom","mapZoom","AvailableParkList_AvailableParkList","DestinationMarker_DestinationMarker","SuggestedParkList_SuggestedParkList","_this2","post","measurementsEndpoint","lon","maxDistance","hour","minute","finally","parkAgent","highway","parkingSpaceNumber","meanOccRate","gMapsApiPrefix","reverse","join","gMapsApiSuffix","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c546d885.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSearch, faUndo} from \"@fortawesome/free-solid-svg-icons\";\n\n\nexport class TopBar extends Component {\n\n  /**\n   * Component's state.\n   * */\n  state = {\n    streetName: ''\n  };\n\n  constructor(props) {\n    super(props);\n    // Initializing font-awesome icons\n    library.add(faSearch, faUndo);\n  }\n\n  render() {\n    return (\n        <header className={'container fluid TopBar'}>\n          <div className={'row'}>\n            <div className={'col-6'}>\n              <h1>aMasIngApp</h1>\n            </div>\n            <div className={'col-6'}>\n              <ul>\n                <li>\n                  <button className={'btn btn-primary'}\n                          onClick={this.props.onReset}>\n                    <FontAwesomeIcon icon={'undo'} />\n                  </button>\n                </li>\n                <li>\n                  <div className={'input-group'}>\n                    <input type={'text'} className={'form-control'} placeholder={'Search by street'}\n                           onChange={this.onSearchInputChanged}\n                           value={this.state.streetName}\n                           onKeyPress={this.onInputKeyPressed}\n                    />\n                    <button className={'input-group-append btn btn-primary SearchButton'}\n                            onClick={this.onSearch}\n                    >\n                      <FontAwesomeIcon icon={\"search\"}/>\n                    </button>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </header>\n    );\n  }\n\n  /**\n   * Action to be performed when the search button is pressed. The action\n   * will be performed if the input has at least two characters.\n   * */\n  onSearch = () => {\n    if (this.props.onSearch && this.state.streetName.length > 2)\n      this.props.onSearch(this.state.streetName); // Taken from component's state\n  };\n\n  /**\n   * Handler for changing the street name input.\n   * @param {Event} evt The generated event\n   * */\n  onSearchInputChanged = (evt) => {\n    this.setState({streetName: evt.target.value});\n  };\n\n  /**\n   * Handler for the pressure of a key in the input. If the pressed key\n   * is ENTER, then it will fire the search.\n   * @param {Event} evt The generated event\n   * */\n  onInputKeyPressed = (evt) => {\n    if(evt.key === 'Enter')\n      this.onSearch();\n  };\n}","import React, {Component} from 'react';\nimport {withScriptjs, withGoogleMap, GoogleMap} from 'react-google-maps';\n\n/**\n * Wrapper for the Google Map.\n * */\nconst MapWrapper = withScriptjs(withGoogleMap((props) => (\n    <GoogleMap\n        center={props.center}\n        defaultZoom={props.zoom}\n        onClick={props.onMapClick}\n    >\n      {props.children}\n    </GoogleMap>\n)));\n\n/**\n * MapPanel Component\n * Manages the rendering of the panel which shows the\n * Google Maps map.\n * */\nexport class MapPanel extends Component {\n\n  /**\n   * Rendering method, displays the component.\n   *\n   * @returns The rendered component\n   * */\n  render() {\n    const {center, zoom, gMapsApiKey} = this.props;\n    return (<div>\n      <MapWrapper\n          googleMapURL={'https://maps.googleapis.com/maps/api/js?key=' + gMapsApiKey + '&v=3.exp&libraries=geometry,drawing,places'}\n          loadingElement={<div style={{height: '100px'}}/>}\n          containerElement={<div className={'MapPanel'}/>}\n          mapElement={<div style={{height: '100%'}}/>}\n          center={center}\n          zoom={zoom}\n          onMapClick={this.onMapClick}\n      >\n        {this.props.children}\n      </MapWrapper>\n    </div>);\n  }\n\n  /**\n   * Handler for click on the map. Calls the destination setter of\n   * with the handler specified in props.\n   * @param {Event} evt The generated map event\n   * */\n  onMapClick = (evt) => {\n    if(this.props.onDestinationSelection)\n      this.props.onDestinationSelection(evt.latLng.lat(), evt.latLng.lng());\n  };\n\n}","import React, {Component} from 'react';\nimport Slider from 'rc-slider';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faWalking, faBlind, faSpinner} from \"@fortawesome/free-solid-svg-icons\";\nimport 'rc-slider/assets/index.css';\n\nexport class SearchWindow extends Component {\n\n  /**\n   * Creates the object, initializing icons.\n   * @param {Object} props React component's properties\n   * */\n  constructor(props) {\n    super(props);\n    library.add(faWalking, faBlind, faSpinner);\n  }\n\n  /**\n   * Renders the object.\n   * @return Component The React component\n   * */\n  render() {\n    // Rendering component\n    return (\n        <form onSubmit={this.onFormSubmitted}>\n          <div className={'SearchPanel form-group'}>\n            <select className={'form-control'}\n                    value={this.props.dow}\n                    onChange={this.onDowChanged}\n            >\n              <option value={0}>Sunday</option>\n              <option value={1}>Monday</option>\n              <option value={2}>Tuesday</option>\n              <option value={3}>Wednesday</option>\n              <option value={4}>Thursday</option>\n              <option value={5}>Friday</option>\n              <option value={6}>Saturday</option>\n            </select>\n            <input type={'time'} className={'form-control'}\n                   value={this.props.time.h + ':' +\n                   ('' + this.props.time.m).padStart(2, '0')}\n                   onChange={this.onTimeChanged}\n            />\n            <input type={'number'} placeholder={'distance (m)'} className={'form-control'}\n                   value={this.props.distance === 0 ? '' : this.props.distance}\n                   onChange={this.onDistanceChanged}\n                   min={0}\n                   step={50}\n            />\n            <div className={'WalkingSlider'}>\n              <div className={'IconWrapper'}>\n                <FontAwesomeIcon icon={\"blind\"}/>\n              </div>\n              <Slider className={'Slider'}\n                      onChange={this.onSliderChanged}\n                      value={this.props.walkWeight}\n              />\n              <div className={'IconWrapper'}>\n                <FontAwesomeIcon icon={\"walking\"}/>\n              </div>\n            </div>\n            <button className={'btn btn-primary btn-sm'}\n                    disabled={this.props.isLoading}\n            >\n              {this.props.isLoading ? (<FontAwesomeIcon icon={'spinner'} pulse/>) : 'Search'}\n            </button>\n          </div>\n        </form>\n    );\n  }\n\n  /**\n   * Handler method for the change on dow.\n   *\n   * @param {Event} evt The generated event\n   * */\n  onDowChanged = (evt) => {\n    this.setState({dow: evt.target.value});\n  };\n\n  /**\n   * Handler method for the change on time.\n   *\n   * @param {Event} evt The generated event\n   * */\n  onTimeChanged = (evt) => {\n    const time = SearchWindow.getTimeFromString(evt.target.value);\n    // Calling the handler function\n    this.props.onTimeChanged({\n        h: time.getHours(),\n        m: time.getMinutes()\n    });\n  };\n\n  /**\n   * Handler function for changing in the distance input.\n   *\n   * @param {Event} evt The generated event\n   * */\n  onDistanceChanged = (evt) => {\n    this.props.onDistanceChanged(evt.target.value);\n  };\n\n  /**\n   * Handler for slider changing.\n   *\n   * @param {number} value Slider value\n   * */\n  onSliderChanged = (value) => {\n    this.props.onWalkWeightChanged(value);\n  };\n\n  /**\n   * Handler function for submitting the form.\n   *\n   * @param {Event} evt The generated event\n   * */\n  onFormSubmitted = (evt) => {\n    evt.nativeEvent.preventDefault(); // Do not actually submit\n    if(this.props.onSubmit)\n      this.props.onSubmit()\n  };\n\n  /**\n   * Static utility function to retrieve Date object from\n   * time inputs.\n   *\n   * @param {Object} time The time input as a string with format 'HH:mm'\n   * */\n  static getTimeFromString(time) {\n    let pieces = time.split(':');\n    time = new Date();\n    time.setHours(pieces[0]);\n    time.setMinutes(pieces[1]);\n    return time;\n  };\n\n}","import React, {Component} from 'react';\nimport {SearchWindow} from './SearchWindow';\nimport {Marker, InfoWindow, Circle} from \"react-google-maps\";\n\n/**\n * Default max distance for searches.\n * */\nconst DEFAULT_MAX_DISTANCE = 100;\n\n/**\n * Component defining the marker for the destination.\n * */\nexport class DestinationMarker extends Component {\n\n  /**\n   * Distance circle appearance.\n   * */\n  static CIRCLE_FILL_COLOR = '#F00';\n  static CIRCLE_STROKE_WEIGHT = 0;\n\n  /**\n   * Offset in pixel for the marker.\n   * */\n  static markerPixelOffset = {\n    x: 0,\n    y: -32\n  };\n\n  /**\n   * React Component's state.\n   * */\n  state = {\n    distance: DEFAULT_MAX_DISTANCE,\n    dow: new Date().getDay(),\n    time: {\n      h: new Date().getHours(),\n      m: new Date().getMinutes()\n    },\n    walkWeight: 50\n  };\n\n  /**\n   *  Rendering method for React Components\n   *  @return Component The react component\n   * */\n  render() {\n    // If no destination has been set, nothing will be rendered\n    if(!this.props.destination)\n      return null;\n    // Conditionally rendering the search window\n    const overlay = (this.props.searchVisible ?\n            <InfoWindow\n                position={this.props.destination}\n                onCloseClick={this.props.onSearchClosed}\n            >\n              <SearchWindow\n                  onSubmit={this.onSubmit}\n                  className={'SearchOpened'}\n                  isLoading={this.props.isLoading}\n                  dow={this.state.dow}\n                  distance={this.state.distance}\n                  time={this.state.time}\n                  walkWeight={this.state.walkWeight}\n                  onDowChanged={this.onDowUpdate}\n                  onTimeChanged={this.onTimeUpdate}\n                  onDistanceChanged={this.onDistanceUpdate}\n                  onWalkWeightChanged={this.onWalkWeightUpdate}\n              />\n            </InfoWindow> : null\n    );\n    return (\n        <Marker\n            position={this.props.destination}\n            onClick={this.props.onMarkerClick}\n        >\n          {overlay}\n          <Circle\n              center={this.props.destination}\n              radius={this.state.distance}\n              options={{\n                fillColor: DestinationMarker.CIRCLE_FILL_COLOR,\n                strokeWeight: DestinationMarker.CIRCLE_STROKE_WEIGHT\n              }}\n          />\n        </Marker>\n    );\n  }\n\n  /**\n   * Handler method when dow is changed into search window.\n   * @param {int} dow Selected day of the week\n   * */\n  onDowUpdate = (dow) => {\n    this.setState({dow: dow});\n  };\n\n  /**\n   * Handler method when time is changed.\n   * @param {Object} time Time in the search window\n   * */\n  onTimeUpdate = (time) => {\n    this.setState({time: time});\n  };\n\n  /**\n   * Handler method for changing in the max distance.\n   * @param {string} distance Max distance for parks\n   * */\n  onDistanceUpdate = (distance) => {\n    this.setState({distance: +distance > 0 ? +distance : 0});\n  };\n\n  /**\n   * Handler method for updating the walking weight.\n   * @param {number} walkWeight Weight given to walk\n   * */\n  onWalkWeightUpdate = (walkWeight) => {\n    this.setState({walkWeight: walkWeight});\n  };\n\n  /**\n   * Handles the submitting of search parameters.\n   * */\n  onSubmit = () => {\n    if(this.props.onSearch)\n      this.props.onSearch(this.state);\n  };\n\n\n}","import React, {Component} from 'react';\n\nconst NO_RESULTS = 'Server returned status code ZERO_RESULTS';\n\nexport class MessageDialog extends Component {\n\n  /**\n   * Constants for error types.\n   * */\n  static TYPE_MESSAGE = 'info';\n  static TYPE_WARNING = 'warning';\n  static TYPE_ERROR = 'danger';\n\n  /**\n   * Renderizes the component.\n   * @return The React Component\n   * */\n  render() {\n    let message = this.getMessage();\n    const typeClass = 'alert-' + this.props.type;\n    return (\n        <div className={'alert ' + typeClass + ' ErrorDialog'}\n             onClick={this.props.onClose}\n        >\n          <h4 className={'alert-heading'}>Warning!</h4>\n          <p>{message}</p>\n          <span className={'CloseError'}>Click to close</span>\n        </div>\n    );\n  }\n\n  /**\n   * Gets the error message from component's properties.\n   * @return string The error message in human readable form\n   * */\n  getMessage = () => {\n    switch(this.props.message) {\n      case NO_RESULTS:\n        return 'The search produced no results.';\n      default:\n        return this.props.message;\n    }\n  };\n\n}","import React, {Component} from 'react';\nimport {Polyline} from \"react-google-maps\";\n\n/**\n * Component used to manage park strokes.\n * */\nexport default class ParkStroke extends Component {\n\n  /**\n   * Renders the component.\n   * @return The React Component rendered\n   * */\n  render() {\n    return (\n        <Polyline\n            path={[this.props.start, this.props.end]}\n            options={{\n              strokeColor: this.props.color,\n              strokeOpacity: this.props.opacity\n            }}\n        />\n    );\n  }\n}","import React, {Component} from 'react';\nimport ParkStroke from \"./ParkStroke\";\n\n/**\n * Component managing the set of available parking lots.\n * */\nexport default class AvailableParkList extends Component {\n\n  /**\n   * Strokes appearance.\n   * */\n  static STROKE_COLOR = '#777';\n  static STROKE_OPACITY = 0.5;\n\n  /**\n   * Renders the component.\n   * @return The react component\n   * */\n  render() {\n    return (\n        <div>\n          {this._buildAvailableParks()}\n        </div>\n    );\n  }\n\n  /**\n   * Creates elements for the available parking lots.\n   * */\n  _buildAvailableParks = () => {\n    let availableParks = [];\n    this.props.parks.forEach((elem) => {\n      availableParks.push(\n          <ParkStroke\n              key={elem.id}\n              start={elem.start}\n              end={elem.end}\n              color={AvailableParkList.STROKE_COLOR}\n              opacity={AvailableParkList.STROKE_OPACITY}\n          />);\n    });\n    return availableParks;\n  }\n}","import React, {Component} from 'react';\n\nexport default class ParkInfo extends Component {\n  /**\n   * Renderizes the element.\n   * */\n  render() {\n    return (\n        <div className={'ParkInfoWindow container'}>\n          <div className={'row'}>Occupancy Rate: {(this.props.occRate * 100).toFixed(0)}%</div>\n          <div className={'row'}>Distance: {ParkInfo._distanceToString(this.props.distance)}</div>\n          <div className={'row'}>Park Number: {this.props.parkNumber}</div>\n          <div className={'row'}>Type: {this.props.streetType}</div>\n          <div className={'row'}>Had measure: {this.props.haveMes ? 'Yes' : 'No'}</div>\n        </div>\n    );\n  }\n\n  /**\n   * Converts a distance in a pretty printable form.\n   * @param {string} distance The distance from the destination\n   * @return string The string representing distance\n   * */\n  static _distanceToString(distance) {\n    let d = (+distance).toFixed(0);\n    if(d < 1000) // Short distance, returning it in meters\n      return d + 'm';\n    else\n      return (d / 1000).toFixed(1) + 'km';\n  };\n}","import React, {Component} from 'react';\nimport {InfoWindow, Marker} from \"react-google-maps\";\n\nimport ParkInfo from './ParkInfo';\nimport ParkStroke from \"./ParkStroke\";\n\n\n/**\n * Component used to manage parking lots markers.\n * */\nexport class ParkMarker extends Component {\n\n  /**\n   * Component's state.\n   * */\n  state = {\n    infoWindowShown: false\n  };\n\n  /**\n   * Strokes appearance.\n   * */\n  static STROKE_COLOR = '#F00';\n  static STROKE_OPACITY = 1;\n\n  /**\n   * Renders the component.\n   * */\n  render() {\n    return (\n        <Marker\n            position={this.getPosition()}\n            onClick={this.toggleOpen}\n            label={'' + this.props.label}\n        >\n          {\n            this.state.infoWindowShown && (<InfoWindow\n                onCloseClick={this.handleClose}\n            >\n              <ParkInfo\n                  occRate={this.props.parking.occupancy}\n                  distance={this.props.parking.distance}\n                  parkNumber={this.props.parking.number}\n                  streetType={this.props.parking.streetType}\n                  haveMes={this.props.parking.haveMes}\n              />\n            </InfoWindow>)\n          }\n          <ParkStroke\n              start={this.props.parking.start}\n              end={this.props.parking.end}\n              color={ParkMarker.STROKE_COLOR}\n              opacity={ParkMarker.STROKE_OPACITY}\n          />\n        </Marker>\n    );\n  };\n\n  /**\n   * Handler for the click on the marker, used to show\n   * the info window.\n   * */\n  toggleOpen = () => {\n    this.setState({infoWindowShown: !this.state.infoWindowShown})\n  };\n\n  /**\n   * Handler for closing the info window.\n   * */\n  handleClose = () => {\n    this.setState({infoWindowShown: false})\n  };\n\n  /**\n   * Gets the position of the marker.\n   * @return {Object} An object with coordinates for the marker\n   * */\n  getPosition = () => {\n    return {\n      lat: (this.props.parking.start.lat + this.props.parking.end.lat) / 2,\n      lng: (this.props.parking.start.lng + this.props.parking.end.lng) / 2\n    };\n  };\n}","import React, {Component} from 'react';\nimport {ParkMarker} from \"./ParkMarker\";\n\n/**\n * Component which manages the list of suggested parks.\n * */\nexport default class SuggestedParkList extends Component {\n  /**\n   * Renders the suggested park list.\n   * */\n  render() {\n    return (\n        <div>{this._buildSuggestedParks()}</div>\n    );\n  };\n\n  /**\n   * Builds the park lot markers.\n   * @return ParkMarker[] The created park markers\n   * */\n  _buildSuggestedParks = () => {\n    let markers = [];\n    this.props.parks.forEach((elem, index) => {\n      markers.push(\n          <ParkMarker\n              key={elem.id}\n              parking={elem}\n              label={index + 1}\n          />\n      );\n    });\n    return markers;\n  };\n}","import React, {Component} from 'react';\nimport Geocode from 'react-geocode';\nimport axios from 'axios';\n\nimport './components/custom.scss';\nimport {TopBar} from './components/TopBar';\nimport {MapPanel} from './components/MapPanel';\nimport {DestinationMarker} from './components/DestinationMarker';\nimport {MessageDialog} from './components/MessageDialog';\nimport AvailableParkList from \"./components/AvailableParkList\";\nimport SuggestedParkList from \"./components/SuggestedParkList\";\n\n/**\n * Constant for the San Francisco City center.\n * */\nconst SF_CENTER = {\n  lat: 37.773972,\n  lng: -122.431297\n};\n\n/**\n * App class\n * ControllerView for the app. Manages the creation of views\n * and it is the top component to which view components send\n * user actions and owns the application centralized state.\n * */\nclass App extends Component {\n\n  /**\n   * Message shown when no parks are found.\n   * */\n  static parksNotFoundMessage = 'No parking lots found with given criteria.';\n\n  /**\n   * Application configuration.\n   * */\n  static configuration = {\n    gMapsApiPrefix: 'T4m_9QA5arCySazIA',\n    defaultMapCenter: SF_CENTER,\n    mapZoom: 13,\n    measurementsEndpoint: 'http://18.184.94.248:9090/measurements',\n    allParksEndpoint: 'http://18.184.94.248:9090/getParks',\n    gMapsApiSuffix: 'E2csRyNvQIoKRBIVi-kRQU',\n  };\n\n  /**\n   * Application state.\n   * */\n  state = {\n    destination: null, // User destination\n    parks: [], // Parking lots found\n    availableParks: [], // All parking lots\n    searchVisible: true, // Initially the search window is visible\n    searching: false // Flag indicating the search is still in progress\n  };\n\n  /**\n   * Creates the application object.\n   * @param {Object} props React Component's properties\n   * */\n  constructor(props) {\n    super(props);\n    // Initializing the Geocoder\n    Geocode.setApiKey(App.getAPIKey());\n    // Loading all parking in order to show them on the map\n    this._loadAllParks();\n  }\n\n  /**\n   * Renders the application.\n   *\n   * @output The React component for the application\n   * */\n  render() {\n    // Building the error dialog if needed\n    let dialog = null;\n    if(this.state.error)\n      dialog = (\n          <MessageDialog\n              message={this.state.error.message}\n              type={this.state.error.type}\n              onClose={this.onDialogClosed}\n          />\n      );\n    return (\n        <div className={'App'}>\n          <TopBar\n              onReset={this.reset}\n              onSearch={this.searchStreetByName}\n          />\n          <MapPanel\n              gMapsApiKey={App.getAPIKey()}\n              center={this.state.destination ? this.state.destination : App.configuration.defaultMapCenter}\n              zoom={this.state.destination ? App.configuration.destinationMapZoom : App.configuration.mapZoom}\n              onDestinationSelection={this.setDestination}\n          >\n            <AvailableParkList parks={this.state.availableParks} />\n            <DestinationMarker\n                destination={this.state.destination}\n                searchVisible={this.state.searchVisible}\n                onSearch={this.searchParks}\n                onSearchClosed={this.onSearchWindowClosed}\n                onMarkerClick={this.onDestinationClick}\n                isLoading={this.state.searching}\n            />\n            <SuggestedParkList parks={this.state.parks} />\n          </MapPanel>\n          {dialog}\n        </div>\n    );\n  }\n\n  /**\n   * Handles the click on the destination marker.\n   * */\n  onDestinationClick = () => {\n    this.setState({searchVisible: true});\n  };\n\n  /**\n   * Handles the closing of the search window.\n   * */\n  onSearchWindowClosed = () => {\n    this.setState({searchVisible: false});\n  };\n\n  /**\n   * Sets the destination, if none has been set already.\n   *\n   * @param {number} lat The destination latitude\n   * @param {number} lng The destination longitude\n   * */\n  setDestination = (lat, lng) => {\n    if(this.state.destination == null)\n      this.setState({\n        destination: {\n          lat: lat,\n          lng: lng\n        }\n      });\n  };\n\n  /**\n   * Resets the destination and found parks.\n   * */\n  reset = () => {\n    this.setState({\n      destination: null,\n      parks: [],\n      searchVisible: true\n    });\n  };\n\n  /**\n   * Search a street by name.\n   * */\n  searchStreetByName = (streetName) => {\n    // Geocoding (adding the city name)\n    Geocode.fromAddress(streetName + ' San Francisco').then((response) => {\n      // Getting the first element and setting destination\n      const {lat, lng} = response.results[0].geometry.location;\n      this.setState({\n        destination: {\n          lat: lat,\n          lng: lng\n        }\n      });\n    }, (error) => {\n      this._showMessageDialog(error.message, MessageDialog.TYPE_ERROR)\n    });\n  };\n\n  /**\n   * Handler method for closing error window.\n   * */\n  onDialogClosed = () => {\n    // Just setting the error to null\n    this.setState({error: null});\n  };\n\n  /**\n   * Sends the search request for parks. It will\n   * asynchronously call the parse response method\n   * when data is ready.\n   *\n   * @param {number} params The search parameters\n   * */\n  searchParks = (params) => {\n    this.setState({parks: [], searching: true});\n    this._sendRequest(params);\n  };\n\n  /**\n   * Sends a request to the endpoint in order to obtain park lots.\n   * @param {number} params The search parameters\n   * */\n  _sendRequest(params) {\n    axios.post(App.configuration.measurementsEndpoint, {\n      lat: this.state.destination.lat,\n      lon: this.state.destination.lng,\n      maxDistance: params.distance,\n      dow: params.dow,\n      hour: params.time.h,\n      minute: params.time.m,\n      walkWeight: 1 - params.walkWeight / 100\n    }).then((response) => {\n          this._parseMeasurementResponse(response.data);\n        }, (error) => {\n          this._showMessageDialog(error.message, MessageDialog.TYPE_ERROR);\n        }\n    ).finally(() => {\n      // In any case, the search is over\n      this.setState({searching: false});\n    })\n  };\n\n  /**\n   * Gets the data for a park.\n   * @param {number} elem The data for the parking sent by the server\n   * @return Object The object with parking information\n   * */\n  static _getParkData(elem) {\n    return {\n      id: elem.parkAgent.id,\n      start: {\n        lat: elem.parkAgent.line.coordinates[0][1],\n        lng: elem.parkAgent.line.coordinates[0][0]\n      },\n      end: {\n        lat: elem.parkAgent.line.coordinates[1][1],\n        lng: elem.parkAgent.line.coordinates[1][0]\n      },\n      streetType: elem.parkAgent.highway,\n      number: elem.parkAgent.parkingSpaceNumber,\n      haveMes: elem.parkAgent.haveMes,\n      distance: elem.distance,\n      occupancy: elem.meanOccRate,\n    };\n  };\n\n  /**\n   * Sends a request to load all parking lots.\n   * */\n  _loadAllParks = () => {\n    axios.get(App.configuration.allParksEndpoint)\n        .then((response) => {\n              this._parseAvailableParkResponse(response.data);\n            },\n            (error) => {\n              // Error in the request: showing an error message\n              this._showMessageDialog(error.message, MessageDialog.TYPE_ERROR);\n            });\n  };\n\n  /**\n   * Parse the available park data response.\n   * @param {Object} data Available park data\n   * */\n  _parseAvailableParkResponse = (data) => {\n    let parks = [];\n    data.forEach((elem) => {\n      parks.push({\n        id: elem.id,\n        start: {\n          lat: elem.line.coordinates[0][1],\n          lng: elem.line.coordinates[0][0]\n        },\n        end: {\n          lat: elem.line.coordinates[1][1],\n          lng: elem.line.coordinates[1][0]\n        }\n      });\n    });\n    this.setState({availableParks: parks});\n  };\n\n  /**\n   * Parses the measurements endpoint response.\n   * @param {Object} data The response's data\n   * */\n  _parseMeasurementResponse = (data) => {\n    let parks = [];\n    data.forEach((elem) => {\n      parks.push(App._getParkData(elem));\n    });\n    if(parks.length === 0) {\n      // No parks found: showing an error message\n      this._showMessageDialog(App.parksNotFoundMessage, MessageDialog.TYPE_MESSAGE);\n    } else {\n      // Updating parks\n      this.setState({\n        parks: parks,\n        searchVisible: false\n      });\n    }\n  };\n\n  /**\n   * Shows a dialog window in the UI.\n   * @param {string} message The message that has to be displayed\n   * @param {int} type Type of the dialog\n   * */\n  _showMessageDialog = (message, type = MessageDialog.TYPE_ERROR) => {\n    this.setState({\n      error: {\n        message: message,\n        type: type\n      }\n    });\n  };\n\n  /**\n   * Gets the API key.\n   * @returns {string} The Google Maps API key.\n   * */\n  static getAPIKey() {\n    return App.configuration.gMapsApiPrefix.split('').reverse().join('') +\n        App.configuration.gMapsApiSuffix.split('').reverse().join('');\n  };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}